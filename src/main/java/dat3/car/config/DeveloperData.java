package dat3.car.config;

import dat3.car.entity.Car;
import dat3.car.entity.Member;
import dat3.car.entity.Reservation;
import dat3.car.repository.CarRepository;
import dat3.car.repository.MemberRepository;
import dat3.car.repository.ReservationRepository;
import dat3.security.entity.Role;
import dat3.security.entity.UserWithRoles;
import dat3.security.repository.UserWithRolesRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;


import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
@Controller
public class DeveloperData implements ApplicationRunner {
    CarRepository carRepository;
    MemberRepository memberRepository;
    ReservationRepository reservationRepository;

    // Create an instance of BCryptPasswordEncoder
    BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();


    public DeveloperData(CarRepository carRepository, MemberRepository memberRepository, ReservationRepository reservationRepository) {
        this.carRepository = carRepository;
        this.memberRepository = memberRepository;
        this.reservationRepository = reservationRepository;
    }

    @Override
    public void run(ApplicationArguments args) throws Exception {
        List<Car> carList = new ArrayList<>();

          String encodedPassword = passwordEncoder.encode(passwordUsedByAll);

        Member m1 = new Member("member1", encodedPassword, "memb1@a.dk", "Kurt", "Wonnegut", "Lyngbyvej 2", "Lyngby", "2800");
        Member m2 = new Member("member2", encodedPassword, "memb2@d.dk", "Hanne", "Wonnegut", "Lyngbyvej 2", "Lyngby", "2800");
        memberRepository.save(m1);
        memberRepository.save(m2);

        //List generated by ChatGPT
        carList.add(new Car("Toyota", "Corolla", 50.0, 10));
        carList.add(new Car("Honda", "Civic", 55.0, 8));
        carList.add(new Car("Ford", "Focus", 48.0, 12));
        carList.add(new Car("Chevrolet", "Malibu", 60.0, 5));
        carList.add(new Car("Nissan", "Altima", 52.0, 15));
        carList.add(new Car("Volkswagen", "Jetta", 45.0, 10));
        carList.add(new Car("Hyundai", "Elantra", 47.0, 10));
        carList.add(new Car("Kia", "Forte", 50.0, 10));
        carList.add(new Car("Subaru", "Impreza", 55.0, 8));
        carList.add(new Car("Mazda", "3", 53.0, 12));
        carList.add(new Car("Audi", "A3", 70.0, 5));
        carList.add(new Car("BMW", "3 Series", 75.0, 15));
        carList.add(new Car("Mercedes-Benz", "C-Class", 80.0, 10));
        carList.add(new Car("Lexus", "IS", 65.0, 10));
        carList.add(new Car("Volvo", "S60", 68.0, 10));
        carList.add(new Car("Tesla", "Model 3", 90.0, 8));
        carList.add(new Car("Porsche", "Panamera", 110.0, 12));
        carList.add(new Car("Jaguar", "XE", 100.0, 5));
        carList.add(new Car("Infiniti", "Q50", 75.0, 15));
        carList.add(new Car("Land Rover", "Range Rover", 150.0, 10));
        carRepository.saveAll(carList);



        setupUserWithRoleUsers();

        Reservation reservation = new Reservation(m1, carList.get(0), LocalDate.now().plusDays(2));
        Reservation reservation2 = new Reservation(m2, carList.get(1), LocalDate.now().plusDays(50));
        reservationRepository.save(reservation);
        reservationRepository.save(reservation2);
    }


    @Autowired
    UserWithRolesRepository userWithRolesRepository;
    final String passwordUsedByAll = "test12";
   String encodedPassword = passwordEncoder.encode(passwordUsedByAll);

    /*****************************************************************************************
     NEVER  COMMIT/PUSH CODE WITH DEFAULT CREDENTIALS FOR REAL
     iT'S ONE OF THE TOP SECURITY FLAWS YOU CAN DO
     *****************************************************************************************/
    private void setupUserWithRoleUsers() {

        System.out.println("******************************************************************************");
        System.out.println("******* NEVER  COMMIT/PUSH CODE WITH DEFAULT CREDENTIALS FOR REAL ************");
        System.out.println("******* REMOVE THIS BEFORE DEPLOYMENT, AND SETUP DEFAULT USERS DIRECTLY  *****");
        System.out.println("**** ** ON YOUR REMOTE DATABASE                 ******************************");
        System.out.println("******************************************************************************");
        UserWithRoles user1 = new UserWithRoles("user1", passwordUsedByAll, "user1@a.dk");
        UserWithRoles user2 = new UserWithRoles("user2", passwordUsedByAll, "user2@a.dk");
        UserWithRoles user3 = new UserWithRoles("user3", passwordUsedByAll, "user3@a.dk");
        UserWithRoles user4 = new UserWithRoles("user4", passwordUsedByAll, "user4@a.dk");
        user1.addRole(Role.USER);
        user1.addRole(Role.ADMIN);
        user2.addRole(Role.USER);
        user3.addRole(Role.ADMIN);
        //No Role assigned to user4
        userWithRolesRepository.save(user1);
        userWithRolesRepository.save(user2);
        userWithRolesRepository.save(user3);
        userWithRolesRepository.save(user4);
    }

}
