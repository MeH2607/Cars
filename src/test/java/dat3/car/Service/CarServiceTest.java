package dat3.car.Service;

import dat3.car.DTO.CarRequest;
import dat3.car.DTO.CarResponse;
import dat3.car.entity.Car;
import dat3.car.repository.CarRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;

import static org.junit.jupiter.api.Assertions.*;

import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;


import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

//This test will be using H2 to simulate the database
@DataJpaTest
class CarServiceTest {
    //TODO flere tests

    //The way I tested methodes that require ID is very subpar, since the H2 database will autogenerate new id's for every method.
    // Therefore I should either find different ways to make these methods without relying on the autogenerated ID, or find a better way to test them.
    //I was limited on time, so I will keep the tests for Delete and FindByID as so.

    @Autowired
    CarRepository carRepository;
    CarService carService;
    Car c1, c2, c3, c4;

    @BeforeEach
    void setup() {
        c1 = carRepository.save(new Car("Toyota", "Prius", 50, 2));
        c2 = carRepository.save(new Car("Audi", "Avant", 20, 7));
        c3 = carRepository.save(new Car("Audi", "A8", 20, 7));
        c4 = carRepository.save(new Car("Audi", "A9", 40, 6));
        carRepository.save(c1);
        carRepository.save(c2);
        carRepository.save(c3);
        carRepository.save(c4);
        carService = new CarService(carRepository);
    }


    @Test
    @Order(1)
    void getCarsLimitedDetails() {
        //testing that the right amount of data is saved
        List<CarResponse> responses = carService.getCars(false);
        assertEquals(4, responses.size());
        //Testng that ID is null  to test if includeAll works..
        Integer testId = responses.get(1).getId();
        assertNull(testId);
    }

    @Test
    @Order(2)
    void getCarsAllDetails() {

        //testing that the right amount of data is saved
        List<CarResponse> responses = carService.getCars(true);
        assertEquals(4, responses.size());
        //Testng that ID is not null and has a value to test if includeAll works.
        Integer testId = responses.get(0).getId();
        assertNotNull(testId);
    }

    @Test
    @Order(3)
    void getCarsByBrand() {
        List<Car> cars = carRepository.findAllByBrand("Audi");
        assertEquals(3, cars.size());
        assertEquals("Audi", cars.get(0).getBrand());

    }

    @Test
    @Order(4)
    void addCar() {
        CarRequest request = CarRequest.builder().
                brand("BMW").
                model("M8").
                pricePrDay(80).
                build();
        CarResponse response = carService.addCar(request);
        int dbSize = carRepository.findAll().size();
        assertEquals("BMW", response.getBrand());
        assertEquals(5, dbSize);
    }

    @Test
    @Order(5)
    void editCar() {

        CarRequest body = new CarRequest(c1);
        body.setPricePrDay(60);
        carService.editCar(body, 1);
        assertEquals(60, c1.getPricePrDay());
    }

    @Test
    @Order(6)
    void deleteCar() {
        for (CarResponse c : carService.getCars(true)) {
            System.out.println(c.getId());
        }
        int id = carRepository.findAll().get(0).getId();
        carService.deleteCar(id);
        assertFalse(carRepository.existsById(id));
    }

    @Test
    void averagePricePerDay(){
        double averageFromServce = carService.getAveragePrice();
        double hardCodedAverage = (50+20+20+40)/4.0;
        assertEquals(hardCodedAverage, averageFromServce);
    }
}